c
params
c
params
c
v
params[:query]
params
exit
@listings = Listing.search(params[:query], suggest: true)
params[:query]
exit
(Listing.search params[:query], autocomplete: false).map(&:title)
params[:query]
params
exit
params[:search][:query]
params[:search]
exit
params[:search].values.include? ""
params[:search].values
params
exit
(array.flatten & [a,d]).empty?
array.flatten & [a,d].empty?
array.flatten & [a,d]
array.flatten
c
array.flatten
array.flatten & [a, d]
[a, d]
((array.flatten.include? a) || (array.flatten.include? d))
(array.flatten.include? a || array.flatten.include? d)
d
a
exit
c
a
exit
(array.flatten.include? a || array.flatten.include? p b)
(array.flatten.include? a || array.flatten.include? b)
p b
a
b
array.flatten.include? a || b
array.flatten.include? (a, b)
array.flatten.include? (a || b)
 array.flatten.include? (a || b)
array.flatten.include? a
array.flatten.include? b
 array.flatten.include? (a || b)
array.flatten.include? b
array.flatten.include? a
!( array.flatten.include? (a || b))
c
@final_relevant
b = Date.parse(params[:search][:bookingenddate])
a = Date.parse(params[:search][:bookingstartdate])
( array.flatten.include? Date.parse(params[:search][:bookingenddate]) )
( array.flatten.include? (Date.parse(params[:search][:bookingstartdate]) || Date.parse(params[:search][:bookingenddate])) )
( array.flatten.include? Date.parse(params[:search][:bookingstartdate]) || Date.parse(params[:search][:bookingenddate]) )
array.flatten.include? Date.parse(params[:search][:bookingenddate])
array.flatten.include? params[:search][:bookingenddate]
array
listing.reservations.pluck(:start, :end)
listing.reservations
array.flatten
!( array.flatten.include? (Date.parse(params[:search][:bookingstartdate]) || Date.parse(params[:search][:bookingenddate])) )
c
!( array.flatten.include? (Date.parse(params[:search][:bookingstartdate]) || Date.parse(params[:search][:bookingenddate])) )
@final_relevant
exit
array.flatten.include? Date.parse(params[:search][:bookingenddate])
Date.parse(params[:search][:bookingenddate])
params[:search][:bookingenddate].class
array.flatten[0].class
array.flatten.include? params[:search][:bookingenddate]
params[:search][:bookingenddate]
params[:search][:bookingstartdate]
array.flatten
array.flatten.include? (params[:search][:bookingstartdate] || params[:search][:bookingenddate])
array
c
params[:search][:bookingenddate]
params[:search][:bookingstartdate]
array.flatten.include? (params[:search][:bookingstartdate] || params[:search][:bookingenddate])
listing.reservations
array
c
@relevant_location.to_a
@relevant_location
@relevant_location.map(:&address)
@relevant_location.first
@relevant_location.last
@relevant_location.first
@relevant_location.count
@relevant_location
exit
results = Listing.search("London")
results = Listing.search("London", fields: [:address])
results = Listing.search("London")
results = Product.search("London")
Listing.search "London"
Listing.all.pluck("address")
Listing.search(params[:search][:location], fields: [:address])
Listing.search(params[:search][:location])
Listing.search(params[:search][:location], fields: [:address])
Listing.search(params[:search][:location])
Listing.search params[:search][:location]
params[:search][:location]
@relevant_location
exit
params[:search]
params_search
Listing
params
c
params[:charge]
exit
[*(@reservation.start..@reservation.end)]
[*(@reservation.start..@reservation.end)][0].class
[*(@reservation.start..@reservation.end)]
[(@reservation.start..@reservation.end)]
(@reservation.start..@reservation.end)
@reservation.end
(@reservation.start..@reservation.end).count
@reservation.start
c
@listing.user
@reservation = @listing.reservations.new(user_id: current_user.id, start: Date.parse(params[:start]), end: Date.parse(params[:end]))
@listing = Listing.find(params[:listing_id])
exit
params
exit
a
a = reservation_params.merge!(key: "bar")
reservation_params
reservation_params.merge!(key: "bar")
reservation_params
reservation_params.merge!(key: "bar")
reservation_params
exit
reservation_params
reservation_params = reservation_params.merge!(key: "bar")
reservation_params
exit
reservation_params
reservation_params = reservation_params.merge!(key: "bar")
reservation_params
reservation_params.merge!(key: "bar")
reservation_params
reservation_params[:reservation_id] = @listing.id
reservation_params
exit
params
@start
exit
@start
reservation_pararms
params
exit
params
exit
@start
exit
params[:start]
params
reservation_params
exit
reservation_params
exit
Reservation.last
@reservation
Reservation
@reservation.id
exit
params
@reservation
c
@reservation
exit
@reservation
c
@reservation
exit
@reservation
params[:reservation_id]
self
params
exit
@reservation
exit
@reservation
c
@listing
@reservation
c
@listing.user
c
exit
ReservationMailer.booking_emailhost(@reservation.user, @listing.user, @reservation.id, @reservation.start.strftime("%d %b %Y"), @reservation.end.strftime("%d %b %Y")).deliver_later
exit
@listing.user
@reservation.user
exit
@reservation.start.strftime("%d %b %Y")
@reservation.start.strftime("Printed on %m/%d/%Y")
@reservation.start.to_s
@reservation.start.string
@reservation.start
exit
args[1]
args.last
args.first
args.count
@reservation
@reservation.user
args
exit
customer.last_name
customer.first_name
customer
exit
@reservation
exit
eit
customer
c
gon.endDates
gon.startDates
c
@endDates.reverse
[4,5,2,4,6,1].reverse
@endDates.sort
[4,5,2,4,6,1].sort
@endDates[0].class
exit[0]
exi
@reservations
exit
@reservation
@reservations
c
@listing.reservations
exit
@listing.reservations
@listing.reservations.last.destroy
@listing.reservations.last
@listing.reservations
@reservations
c
@reservations.flatten
@reservations
c
@reservations
exit
